package assignmentwo;

import java.util.Scanner;

public class AssignmenTwo {

    private static Scanner in = new Scanner(System.in);;
	

	static String var = "";
	static double[] val = new double[100];
	static String[] expression = new String[100];
	static double[] ans = new double[100];
	
	
	static int Op_Pre(char op)
	{
		int pre = 0;
		
		if (op == '+' || op == '-')
		{
			pre = 5;
		}
		else if (op == '*' || op == '/')
		{
			pre = 6;
		}
		
		return pre;
	}
	
	
	static String infixToPostfix(String infix)
	{
		
		String stack = "", postfix = "";
		int i = 0, top = -1;
		
		
		for (i = 0; i < infix.length(); i++)
		{
			//System.out.println(infix.charAt(i));
			
			if(infix.charAt(i) >= 'A' && infix.charAt(i) <= 'Z' || infix.charAt(i) >= 'a' && infix.charAt(i) <= 'z')
			{
				postfix = postfix+infix.charAt(i);
			}
			else if(infix.charAt(i) == ' ')
				continue;
			else
			{
				
				if (top == -1 || Op_Pre(infix.charAt(i)) > Op_Pre(stack.charAt(top)))
				{
					//push
					top++;
				//	stack.replace(infix.charAt(top), infix.charAt(i));
					
				//	stack = stack+infix.charAt(i);
					
					stack = new StringBuilder(stack).insert(top, infix.charAt(i)).toString(); // This Line is to insert a character in a specific position
				}
				else
				{
					//pop
		 			postfix = postfix+stack.charAt(top);
					top--;
					i--;
				}
			}
			
		}
		
		for (; top > -1; top--)
		{
			postfix = postfix+stack.charAt(top);
		}
		
		return postfix;
		
	}
        public static double Cal(double n1, char operator, double n2)
	{
		double ans = 0;
		
		switch (operator)
		{
		case '+':
			ans = n1+n2;
			break;
		case '-':
			ans = n1-n2;
			break;
		case '*':
			ans = n1*n2;
			break;
		case '/':
			ans = n1/n2;
			break;
		default:
			break;
		}
		
		return ans;
	}
	
	public static double gettingValue(char variable)
	{
		double value = 0;
		for (int i = 0; i < var.length(); i++)
		{
			if (var.charAt(i) == variable)
			{
				return val[i];
			}
		}
		
		return value;

	}
	
	public static double Calexpression(String expresssion)
	{
		String postfixexpression = infixToPostfix(expresssion);
		double ans = 0;
		double[] stack = new double[100];
		int top = -1;
		
		//Main Calculation Code
		
		for (int i = 0; i < postfixexpression.length(); i++)
		{
			if(postfixexpression.charAt(i) >= 'A' && postfixexpression.charAt(i) <= 'Z' || postfixexpression.charAt(i) >= 'a' && postfixexpression.charAt(i) <= 'z')
			{
				stack[++top] = gettingValue(postfixexpression.charAt(i));
			}
			else if(postfixexpression.charAt(i) == ' ')
				continue;
			else
			{
				stack[top-1] = Cal(stack[top-1], postfixexpression.charAt(i), stack[top]);
				top--;
			}
		}
		
		if (top == 0)
		{
			ans = stack[top];
		}
		
		
		return ans;
	}
    public static void main(String[] args) {
        System.out.print("Number Of Variables:  ");
		int NOVs = in.nextInt();
		
		int i;
		
		
		System.out.println("Enter Variable Names(One Letter):");
		for (i = 0; i <= NOVs; i++)
		{
			var = var + in.nextLine();
		}
		
		System.out.println("Enter Values:");
		for (i = 0; i < NOVs; i++)
		{
			System.out.print(var.charAt(i)+" = ");
			val[i] = in.nextDouble();
		}
		
		
		System.out.print("Number Of Equations:");
		int NOE = in.nextInt();
		
		
		System.out.println("Enter Equations:");
		for (i = 0; i <= NOE; i++)
		{
			if(i!=0)
				System.out.print((i)+". ");
			expression[i] = in.nextLine();
		}
		
		
		
		for (i = 1; i <= NOE; i++) {
			ans[i] = Calexpression(expression[i]);
		}
		
		for (i = 1; i <= NOE; i++) {
			System.out.println("Answer Of Equation "+(i)+" is = "+ans[i]);
                        System.out.println("\n");
		}
	}


}

/*
sample input:                                         sample output:

3 // number of variables                              8 //for first equation
a = 1                                                 5 // for second equation
b = 2
c = 2

2 // number of equations
a x b + a x c + b x c
a x c - b / c + c x c



---------------------------------------------------------------------------------------



sample input:                                         sample output:
4 // number of variables                              -1 //for first equation
g = 2                                                 -2 //for second equation
p = 3                                                 Compilation Error // for third equation
t = 1
w = 2

3 // number of equations
g + p x t - w x p
t - g + t - w
e + t x t - m
*/
